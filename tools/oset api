oset_time_now()
oset_micro_time_now()
oset_apr_time_exp_lt(&tm, oset_micro_time_now());
oset_apr_strftime_nocheck(date, &retsize, sizeof(date), "%Y-%m-%d %T", &tm);

oset_apr_time_exp_t tm;

oset_apr_time_exp_lt(&tm, now);
oset_apr_snprintf(date, sizeof(date), "%0.4d/%0.2d/%0.2d %0.2d:%0.2d:%0.2d.%0.6d %0.2f%%%%",
				tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec, tm.tm_usec, oset_core_idle_cpu());

oset_gettimeofday(&tv);
oset_localtime(tv.tv_sec, &tm);
strftime(nowstr, sizeof nowstr, "%m/%d %H:%M:%S", &tm);

cleanup_time = oset_micro_time_now() + (globals.limit_cleanup_interval_sec * 1000 * 1000);

oset_api_execute
oset_core_session_execute_application
switch_loadable_module_get_dialplan_interface

oset_separate_string_string
oset_separate_string
oset_split

strcmp
strcasecmp（不区分大小写）

oset-conv.c  （hex string转换）

oset_msprintf
oset_snprintf
sprintf
snprintf
oset_apr_snprintf

oset_core_memory_init        runtime.memory_pool
oset_core_permanent_alloc
oset_core_permanent_strdup

oset_malloc
oset_pkbuf_alloc

OSET_MEM_STORE
OSET_MEM_CLEAR
oset_memdup

oset_core_new_memory_pool
oset_core_destroy_memory_pool
oset_core_alloc
oset_core_session_alloc
oset_core_memory_pool_set_data//key value
oset_core_memory_pool_get_data

oset_core_strdup
oset_sys_strdup
oset_strdup

oset_pkbuf_copy
oset_memdup

oset_session_set_variable
oset_core_session_get_pool
oset_core_session_strdup
oset_core_session_sprintf
oset_core_sprintf


oset_apr_snprintf
oset_snprintf

oset_safe_free
oset_free

oset_scheduler_del_task_group
oset_scheduler_add_task
oset_scheduler_del_task_id


oset_core_hash_init
oset_core_hash_insert
oset_core_hash_delete

oset_apr_mutex_lock
oset_apr_mutex_unlock
oset_apr_mutex_init
oset_apr_thread_cond_timedwait

oset_apr_file_open

oset_core_get_uuid

oset_apr_uuid_get(&uuid);
oset_apr_uuid_format(system->common->uuid_str, &uuid);
oset_core_session_get_uuid

oset_core_session_get_id

OpenAPI_list_add

oset_sys_assert
oset_assert
oset_expect_or_return_val
oset_assert_if_reached()

oset_test_flag

oset_core_timer_init
oset_core_timer_next
oset_core_timer_step
oset_core_timer_check
oset_core_timer_destroy


oset_core_set_variable//快捷hash
oset_core_get_variable

oset_event_create_plain//貌似hash+list
		for (hp = log_fields->headers; hp; hp = hp->next) {
oset_event_get_header
oset_event_del_header
oset_event_del_header_val
oset_event_add_header_string
oset_event_safe_destroy
oset_event_add_body

oset_apr_mutex_lock(runtime.session_hash_mutex);
session_manager.others_count[0]++;
oset_apr_mutex_unlock(runtime.session_hash_mutex);
oset_apr_mutex_lock(runtime.session_hash_mutex);
oset_core_hash_insert(session_manager.session_table, session->common->uuid_str, session);
session_manager.session_count++;
oset_apr_mutex_unlock(runtime.session_hash_mutex);


byte_buffer_t
oset_pkbuf_t

oai：
oset_apr_mutex_lock(session->common->profile_mutex);
oset_event_destroy(&session->common->variables);
oset_apr_mutex_unlock(session->common->profile_mutex);

 //链表和红黑色，参考oai
  if (instance_p == NULL) {
    STAILQ_FOREACH(instance_p, &ngap_gNB_internal_data.ngap_gNB_instances_head,
                   ngap_gNB_entries) {
      found = RB_FIND(ngap_amf_map, &instance_p->ngap_amf_head, &temp);

      if (found != NULL) {
        return found;
      }
    }
}


  uint32_t sfn    = current_tti / SRSRAN_NOF_SF_X_FRAME;
  uint32_t sf_idx = current_tti % SRSRAN_NOF_SF_X_FRAME;

int nas_timer_init(void) 定时器 OAI5g


ngap_messages_callback oai状态机回调
f1ap_message_processing_t f1ap_messages_processing[][3] oai状态机回调


/* send tick to RLC and RRC every ms */
if ((slot & ((1 << *scc->ssbSubcarrierSpacing) - 1)) == 0) {
void nr_rlc_tick(int frame, int subframe);
void nr_pdcp_tick(int frame, int subframe);
nr_rlc_tick(frame, slot >> *scc->ssbSubcarrierSpacing);
nr_pdcp_tick(frame, slot >> *scc->ssbSubcarrierSpacing);
nr_rrc_trigger(&ctxt, 0 /*CC_id*/, frame, slot >> *scc->ssbSubcarrierSpacing);
}

const NR_TDD_UL_DL_Pattern_t *tdd = scc->tdd_UL_DL_ConfigurationCommon ? &scc->tdd_UL_DL_ConfigurationCommon->pattern1 : NULL;

int nr_slots_period = n;
int nr_dl_slots = n;
int nr_ulstart_slot = 0;
if (tdd) {
  nr_ulstart_slot = tdd->nrofDownlinkSlots + (tdd->nrofUplinkSymbols == 0);
  nr_dl_slots = tdd->nrofDownlinkSlots + (tdd->nrofDownlinkSymbols != 0);
  nr_ulstart_slot = tdd->nrofDownlinkSlots + (tdd->nrofUplinkSymbols == 0);
  nr_slots_period /= get_nb_periods_per_frame(tdd->dl_UL_TransmissionPeriodicity);
}
else
  // if TDD configuration is not present and the band is not FDD, it means it is a dynamic TDD configuration
  AssertFatal(RC.nrmac[Mod_idP]->common_channels[0].frame_type == FDD,"Dynamic TDD not handled yet\n");

for (int slot = 0; slot < n; ++slot) {
  RC.nrmac[Mod_idP]->dlsch_slot_bitmap[slot / 64] |= (uint64_t)((slot % nr_slots_period) < nr_dl_slots) << (slot % 64);
  RC.nrmac[Mod_idP]->ulsch_slot_bitmap[slot / 64] |= (uint64_t)((slot % nr_slots_period) >= nr_ulstart_slot) << (slot % 64);

  LOG_I(NR_MAC, "In %s: slot %d DL %d UL %d\n",
		__FUNCTION__,
		slot,
		(RC.nrmac[Mod_idP]->dlsch_slot_bitmap[slot / 64] & ((uint64_t)1 << (slot % 64))) != 0,
		(RC.nrmac[Mod_idP]->ulsch_slot_bitmap[slot / 64] & ((uint64_t)1 << (slot % 64))) != 0);
}

do_MIB_NR

rx_rf

pf_dl

void gNB_dlsch_ulsch_scheduler(module_id_t module_idP,
                               frame_t frame,
                               sub_frame_t slot){
  
oran：
void handle_slot_indication(slot_point sl_tx) override  
void fapi_to_mac_time_msg_translator::on_slot_indication(const fapi::slot_indication_message& msg)
on_slot_indication
// > Schedule UE DL and UL data.
	 ue_sched->run_slot(sl_tx, cell_index);
	 void ue_scheduler_impl::run_slot(slot_point slot_tx, du_cell_index_t cell_index)
	 on_tti_boundary
	 process_symbol
	 
void handle_slot_indication(slot_point sl_tx) override
{
// Step timers by one millisecond.
if (sl_tx.to_uint() % get_nof_slots_per_subframe(to_subcarrier_spacing(sl_tx.numerology())) == 0) {
  timers.tick_all();
}

// Handle slot indication in MAC & Scheduler.
mac.get_slot_handler(to_du_cell_index(0)).handle_slot_indication(sl_tx);
}
void mac_cell_processor::handle_slot_indication_impl(slot_point sl_tx)
const sched_result* scheduler_impl::slot_indication(slot_point sl_tx, du_cell_index_t cell_index)
void cell_scheduler::run_slot(slot_point sl_tx)
void prach_scheduler::run_slot(cell_resource_allocator& res_grid)
